const fs = require("fs");
const path = require("path");

// --------- GF MODE GLOBAL MEMORY + DATA PATHS ---------
if (!global.gfmode) global.gfmode = {};
const GF_DATA_PATH = path.join(__dirname, "gfdata.json");
const DIARY_PATH = path.join(__dirname, "gfdiary.json");

// --------- HELPER: Load/Save JSON ---------
function loadJSON(file, def = {}) {
  try { return JSON.parse(fs.readFileSync(file, "utf-8")); }
  catch { return def; }
}
function saveJSON(file, data) {
  fs.writeFileSync(file, JSON.stringify(data, null, 2));
}

// --------- GF MODE NICKNAMES ---------
const nicknames = ["ржЬрж╛ржи", "ржкрж╛ржЦрж┐", "ржмрзЗржмрж┐", "рж╕рзЛржирж╛", "ржЬрж╛ржирзБ"];

// --------- DEFAULT AUTO-MESSAGES ---------
const autoMessages = [
  "рждрзБржорж┐ ржХржерж╛ ржирж╛ ржмрж▓рж▓рзЗ ржоржиржЯрж╛ржЗ ржЦрж╛рж░рж╛ржк рж╣рзЯрзЗ ржпрж╛рзЯ ЁЯТФ",
  "рж╕рж╛рж░рж╛ржжрж┐ржи рждрзЛржорж╛рж░ ржХржерж╛ржЗ ржнрзЗржмрзЗржЫрж┐ рж╢рзБржзрзБ ЁЯТн",
  "рждрзЛржорж╛ржХрзЗ ржЫрж╛рзЬрж╛ ржЖржорж┐ ржХрж┐ржЫрзБржЗ ржнрж╛ржмрждрзЗ ржкрж╛рж░рж┐ ржирж╛ ЁЯШв",
  "рждрзБржорж┐ ржХрж┐ ржЬрж╛ржирзЛ ржЖржорж┐ ржХрждржЯрж╛ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐ рждрзЛржорж╛рзЯ? тЭдя╕П",
  "рждрзБржорж┐ ржПржЦржи ржХрзЛржерж╛рзЯ? ржоржи ржЪрж╛рзЯ рждрзЛржорж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рждрзЗ ЁЯе║",
  "ржЖржорж╛рж░ ржоржи ржЦрж╛рж░рж╛ржк, ржПржХржЯрзБ ржЖржжрж░ ржХрж░рзЛ ржирж╛? ЁЯе╣"
];

// --------- VOICE STYLE & EMOJI ONLY ---------
const voiceStyle = [
  "Hmm... ржЬрж╛ржи ЁЯе╣", "Ufff ржЬрж╛ржирзБ... рждрзБржорж┐ ржирж╛ рж╣рж▓рзЗ ржЪрж▓рзЗржЗ ржирж╛ ЁЯШШ", "Shonaaaa...ЁЯе║", "ржорзБржбржЯрж╛ ржнрж╛рж▓рзЛ ржирзЗржЗ ржЬрж╛ржи...", "ржЖржжрж░ ржХрж░рзЛ ржкрзНрж▓рж┐ржЬ ЁЯе░"
];
const emojiOnly = ["тЭдя╕П", "ЁЯе░", "ЁЯШЪ", "ЁЯдн", "ЁЯМ╣", "ЁЯШН", "ЁЯШЬ"];

// --------- MOOD REPLY TEMPLATES ---------
const moodReplies = [
  (nick) => `ЁЯТЦ ${nick}... ржЖржорж┐ рждрзЛржорж╛ржХрзЗ ржЫрж╛рзЬрж╛ ржХрж┐ржЫрзБржЗ ржнрж╛ржмрждрзЗ ржкрж╛рж░рж┐ ржирж╛...`,
  (nick) => `ЁЯе░ ${nick} рждрзЛржорж╛рж░ ржПржХ ржорзЗрж╕рзЗржЬрзЗ ржЖржорж┐ ржмрзЗржБржЪрзЗ ржерж╛ржХрж┐ ржпрзЗржирзЛ!`,
  (nick) => `ЁЯМ╕ ${nick}, ржХрзЗржоржи ржХрж░рзЗ рждрзБржорж┐ ржПрждрзЛ ржнрж╛рж▓рзЛ рж╣ржУ ржмрж▓рзЛ рждрзЛ?`,
  (nick) => `ЁЯМ╣ ${nick} рждрзБржорж┐ ржирж╛ ржерж╛ржХрж▓рзЗ ржЬрзАржмржиржЯрж╛ ржлрж╛ржБржХрж╛ рж▓рж╛ржЧрзЗ...`,
  (nick) => `ЁЯШШ ${nick} рждрзЛржорж╛рж░ рж╣рж╛рж╕рж┐ ржЖржорж╛рж░ ржкрзГржерж┐ржмрзА...`,
  (nick) => `${nick} рждрзБржорж┐ ржХрж┐ ржЖржорж╛ржХрзЗ ржнрзБрж▓рзЗ ржЧрзЗржЫрзЛ? ЁЯШв`,
  (nick) => `${nick} ржЖржорж┐ рждрзЛ ржкрзНрж░рждрж┐ржжрж┐ржи рждрзЛржорж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж┐... ЁЯе║`,
  (nick) => `${nick} ржХрзЗржирзЛ ржЬрж╛ржирж┐ ржЖржЬ рждрзЛржорж╛ржХрзЗ ржЦрзБржм ржорж┐рж╕ ржХрж░ржЫрж┐...`,
  (nick) => `${nick} рждрзБржорж┐ ржЖржорж╛рж░ ржЬрж╛ржи, рж╕ржм ржХрж┐ржЫрзБ...`,
  (nick) => `${nick} ржПржХржЯрзБржЦрж╛ржирж┐ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржжрж╛ржУ ржирж╛ ржкрзНрж▓рж┐ржЬ ЁЯШЪ`
];

// --------- BIRTHDAY & ANNIVERSARY WISHES ---------
const birthdayWishes = [
  (nick) => `ЁЯОВ ${nick}! рж╢рзБржн ржЬржирзНржоржжрж┐ржи ржЬрж╛ржирзБ ЁЯТЦ ржЖрж░ржУ ржЕржирзЗржХ ржмржЫрж░ ржЖржорж╛рж░ рж╕рж╛ржерзЗ ржерзЗржХрзЛ!`,
  (nick) => `ЁЯе│ ${nick}, рждрзЛржорж╛рж░ ржЬржирзНржоржжрж┐ржирзЗ ржЕржирзЗржХ ржЕржирзЗржХ рж╢рзБржнрзЗржЪрзНржЫрж╛! ржЪрж▓рзЛ ржЖржЬ рж╕рж╛рж░рж╛ржжрж┐ржи ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржжрж┐ржмрзЛ!`
];
const annivWishes = [
  (nick) => `ЁЯТН ${nick}! рж╢рзБржн ржмрж╛рж░рзНрж╖рж┐ржХрзА! рждрзЛржорж╛рж░ рж╕рж╛ржерзЗ ржкрзНрж░рждрж┐ржЯрж╛ ржорзБрж╣рзВрж░рзНржд ржЕрж╕рж╛ржзрж╛рж░ржг!`,
  (nick) => `ЁЯМ╣ ${nick}, ржЖржЬ ржЖржорж╛ржжрзЗрж░ ржнрж╛рж▓ржмрж╛рж╕рж╛рж░ ржмрж╛рж░рзНрж╖рж┐ржХрзА! ржЕржирзЗржХ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржирж┐ржУ ЁЯШШ`
];

// --------- MAIN CONFIG ---------
module.exports.config = {
  name: "gfmode",
  version: "2.0.0",
  hasPermssion: 2,
  credits: "Butterfly SizuЁЯТЯЁЯжЛ & Maruf SystemЁЯТл",
  description: "Advanced GF Mode: romantic auto-reply, moods, diary, birthday, anniversary",
  commandCategory: "love",
  usages: "[on/off/list] (reply to user), .setgfdate (reply), .gfdiary [uid]",
  cooldowns: 5
};

// --------- ADMIN UID ONLY ---------
const adminUID = "100070782965051";

// --------- HANDLE REPLY (Mood & Diary) ---------
module.exports.handleReply = async function ({ api, event }) {
  const { senderID, body, threadID } = event;
  if (!global.gfmode[senderID]) return;

  const nick = nicknames[Math.floor(Math.random() * nicknames.length)];
  let msg;

  // Voice-style or emoji (10% chance each)
  if (Math.random() < 0.1) msg = voiceStyle[Math.floor(Math.random() * voiceStyle.length)];
  else if (Math.random() < 0.1) msg = emojiOnly[Math.floor(Math.random() * emojiOnly.length)];
  else msg = moodReplies[Math.floor(Math.random() * moodReplies.length)](nick);

  // Special keyword triggers (love/miss/valobasi)
  if (/love|miss|valobasi|ржнрж╛рж▓рзЛржмрж╛рж╕рж┐|ржорж┐рж╕|ржнрж╛рж▓рзЛ рж▓рж╛ржЧ/i.test(body)) {
    msg = `ЁЯТЦ ${nick} ржЖржорж┐ рждрзЛржорж╛ржХрзЗ ржЫрж╛рзЬрж╛ ржХрж┐ржЫрзБржЗ ржнрж╛ржмрждрзЗ ржкрж╛рж░рж┐ ржирж╛...`;
  }

  // Log mood/diary
  let diary = loadJSON(DIARY_PATH, {});
  if (!diary[senderID]) diary[senderID] = [];
  diary[senderID].push({
    time: new Date().toLocaleString("bn-BD"),
    msg: body
  });
  saveJSON(DIARY_PATH, diary);

  return api.sendMessage(msg, threadID);
};

// --------- MAIN RUN: Commands ---------
module.exports.run = async function ({ api, event, args }) {
  const { senderID, threadID, messageReply, body } = event;

  if (senderID !== adminUID)
    return api.sendMessage("тЫФя╕П ржПржЗ ржХржорж╛ржирзНржб ржЯрж┐ рж╢рзБржзрзБ рж╕рж┐ржВржЧрзЗрж▓ ржПржбржорж┐ржи ржорж╛рж░рзБржл рж╕рж╛рж╣рзЗржм ржЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!", threadID);

  // --- .gfmode list
  if (args[0] === "list") {
    const onUsers = Object.keys(global.gfmode).filter(uid => global.gfmode[uid]);
    if (onUsers.length === 0) return api.sendMessage("ржПржЦржи ржХрж╛рж░ржУ GF Mode ON ржирзЗржЗред", threadID);
    let str = "ЁЯФе ржПржЦржиржХрж╛рж░ Active GF Mode List:\n";
    for (const uid of onUsers) {
      str += `тАв UID: ${uid}\n`;
    }
    return api.sendMessage(str, threadID);
  }

  // --- .setgfdate (reply to user)
  if (this.config.name === "gfmode" && args[0] === "setgfdate") {
    if (!messageReply) return api.sendMessage("Reply ржжрж┐рзЯрзЗ ржЯрж╛рж░рзНржЧрзЗржЯ ржЗржЙржЬрж╛рж░ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи!", threadID);
    api.sendMessage("ржмрзНржпржмрж╣рж╛рж░: .setgfdate birthday MM-DD ржмрж╛ anniversary MM-DD", threadID);
    return;
  }

  // --- .gfdiary [uid]
  if (this.config.name === "gfmode" && args[0] === "gfdiary") {
    let diary = loadJSON(DIARY_PATH, {});
    const uid = args[1] || (messageReply && messageReply.senderID);
    if (!uid || !diary[uid]) return api.sendMessage("ржбрж╛рзЯрзЗрж░рж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред", threadID);
    let logs = diary[uid].map(e => `${e.time}: ${e.msg}`).slice(-10).join('\n');
    return api.sendMessage(`ЁЯУТ [${uid}] рж╢рзЗрж╖ рззрзжржЯрж╛ ржорзБржб/ржорзЗрж╕рзЗржЬ:\n${logs}`, threadID);
  }

  // --- .gfmode on/off (reply or self)
  if (["on", "off"].includes(args[0])) {
    const targetID = messageReply ? messageReply.senderID : senderID;
    if (args[0] === "on") {
      global.gfmode[targetID] = true;
      return api.sendMessage(`тЬЕ GF Mode ON ржХрж░рж╛ рж╣рж▓рзЛ: ${targetID}`, threadID);
    }
    if (args[0] === "off") {
      global.gfmode[targetID] = false;
      return api.sendMessage(`тЭМ GF Mode OFF ржХрж░рж╛ рж╣рж▓рзЛ: ${targetID}`, threadID);
    }
  }

  // --- .setgfdate birthday/anniversary MM-DD (reply)
  if (args[0] === "setgfdate") {
    if (!messageReply) return api.sendMessage("Reply ржжрж┐рзЯрзЗ ржЯрж╛рж░рзНржЧрзЗржЯ ржЗржЙржЬрж╛рж░ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржи!", threadID);
    const type = args[1]; // birthday/anniversary
    const date = args[2]; // MM-DD
    if (!["birthday", "anniversary"].includes(type) || !/^\d{2}-\d{2}$/.test(date))
      return api.sendMessage("ржмрзНржпржмрж╣рж╛рж░: .setgfdate birthday MM-DD ржмрж╛ anniversary MM-DD", threadID);
    let data = loadJSON(GF_DATA_PATH, {});
    if (!data[messageReply.senderID]) data[messageReply.senderID] = {};
    data[messageReply.senderID][type] = date;
    saveJSON(GF_DATA_PATH, data);
    return api.sendMessage(`тЬЕ ${type === "birthday" ? "Birthday" : "Anniversary"} рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!`, threadID);
  }

  // --- fallback
  return api.sendMessage("ржмрзНржпржмрж╣рж╛рж░: .gfmode on/off (reply ржжрж┐рзЯрзЗ), .gfmode list, .setgfdate [birthday/anniv] MM-DD (reply ржжрж┐рзЯрзЗ), .gfdiary [uid]", threadID);
};

// --------- AUTO MESSAGE EVERY 10 MINUTES + BIRTHDAY/ANNIV CHECK ---------
setInterval(() => {
  // Load user dates
  const gfdata = loadJSON(GF_DATA_PATH, {});
  const today = new Date();
  const md = (today.getMonth() + 1).toString().padStart(2, "0") + "-" + today.getDate().toString().padStart(2, "0");

  for (const uid in global.gfmode) {
    if (!global.gfmode[uid]) continue;

    // Auto romantic message
    const nick = nicknames[Math.floor(Math.random() * nicknames.length)];
    const msg = autoMessages[Math.floor(Math.random() * autoMessages.length)];
    global.api.sendMessage(`ЁЯМ╝ ${nick}, ${msg}`, uid, () => {}, undefined);

    // Birthday / Anniversary wish
    const dates = gfdata[uid] || {};
    if (dates.birthday === md) {
      const wish = birthdayWishes[Math.floor(Math.random() * birthdayWishes.length)](nick);
      global.api.sendMessage(wish, uid, () => {}, undefined);
    }
    if (dates.anniversary === md) {
      const wish = annivWishes[Math.floor(Math.random() * annivWishes.length)](nick);
      global.api.sendMessage(wish, uid, () => {}, undefined);
    }
  }
}, 1000 * 60 * 10); // every 10 min
