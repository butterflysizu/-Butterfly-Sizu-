const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "gfmode",
  version: "2.0.0",
  hasPermssion: 2,
  credits: "Butterfly SizuЁЯТЯЁЯжЛ & Maruf SystemЁЯТл",
  description: "GF Mode: romantic AI mode with mood, memory & date system",
  commandCategory: "love",
  usages: "[on/off/list/setgfdate/gfdiary]",
  cooldowns: 5
};

const DATA_FILE = path.join(__dirname, "gfdata.json");
if (!global.gfmode) global.gfmode = {};
if (!fs.existsSync(DATA_FILE)) fs.writeFileSync(DATA_FILE, "{}");

// Load GF data
const loadData = () => JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
const saveData = (data) => fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));

// Admin UID
const adminUID = "100070782965051";

// Nicknames
const nicknames = ["ржЬрж╛ржи", "ржкрж╛ржЦрж┐", "ржмрзЗржмрж┐", "рж╕рзЛржирж╛", "ржЬрж╛ржирзБ"];

// Auto romantic messages
const autoMessages = [
  "рждрзБржорж┐ ржХржерж╛ ржирж╛ ржмрж▓рж▓рзЗ ржоржиржЯрж╛ржЗ ржЦрж╛рж░рж╛ржк рж╣рзЯрзЗ ржпрж╛рзЯ ЁЯТФ",
  "рж╕рж╛рж░рж╛ржжрж┐ржи рждрзЛржорж╛рж░ ржХржерж╛ржЗ ржнрзЗржмрзЗржЫрж┐ рж╢рзБржзрзБ ЁЯТн",
  "рждрзЛржорж╛ржХрзЗ ржЫрж╛рзЬрж╛ ржЖржорж┐ ржХрж┐ржЫрзБржЗ ржнрж╛ржмрждрзЗ ржкрж╛рж░рж┐ ржирж╛ ЁЯШв",
  "рждрзБржорж┐ ржХрж┐ ржЬрж╛ржирзЛ ржЖржорж┐ ржХрждржЯрж╛ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐ рждрзЛржорж╛рзЯ? тЭдя╕П",
  "рждрзБржорж┐ ржПржЦржи ржХрзЛржерж╛рзЯ? ржоржи ржЪрж╛рзЯ рждрзЛржорж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рждрзЗ ЁЯе║",
  "ржЖржорж╛рж░ ржоржи ржЦрж╛рж░рж╛ржк, ржПржХржЯрзБ ржЖржжрж░ ржХрж░рзЛ ржирж╛? ЁЯе╣"
];

// Handle romantic reply
module.exports.handleReply = async function ({ api, event }) {
  const { senderID, body, threadID } = event;
  const isGF = global.gfmode[senderID];
  if (!isGF) return;

  const data = loadData();
  const nick = nicknames[Math.floor(Math.random() * nicknames.length)];
  const loveLines = [
    `ЁЯТЦ ${nick}... ржЖржорж┐ рждрзЛржорж╛ржХрзЗ ржЫрж╛рзЬрж╛ ржХрж┐ржЫрзБржЗ ржнрж╛ржмрждрзЗ ржкрж╛рж░рж┐ ржирж╛...`,
    `ЁЯе░ ${nick} рждрзЛржорж╛рж░ ржПржХ ржорзЗрж╕рзЗржЬрзЗ ржЖржорж┐ ржмрзЗржБржЪрзЗ ржерж╛ржХрж┐ ржпрзЗржирзЛ!`,
    `ЁЯМ╕ ${nick}, ржХрзЗржоржи ржХрж░рзЗ рждрзБржорж┐ ржПрждрзЛ ржнрж╛рж▓рзЛ рж╣ржУ ржмрж▓рзЛ рждрзЛ?`,
    `ЁЯМ╣ ${nick} рждрзБржорж┐ ржирж╛ ржерж╛ржХрж▓рзЗ ржЬрзАржмржиржЯрж╛ ржлрж╛ржБржХрж╛ рж▓рж╛ржЧрзЗ...`,
    `ЁЯШШ ${nick} рждрзЛржорж╛рж░ рж╣рж╛рж╕рж┐ ржЖржорж╛рж░ ржкрзГржерж┐ржмрзА...`
  ];

  // Save to diary
  if (!data[senderID]) data[senderID] = {};
  if (!data[senderID].diary) data[senderID].diary = [];
  data[senderID].diary.push({ msg: body, time: new Date().toLocaleString() });
  saveData(data);

  if (/love|miss|valobasi|ржнрж╛рж▓рзЛржмрж╛рж╕рж┐|ржорж┐рж╕|ржнрж╛рж▓рзЛ рж▓рж╛ржЧ/i.test(body)) {
    return api.sendMessage(loveLines[Math.floor(Math.random() * loveLines.length)], threadID);
  }

  const moods = [
    `${nick} рждрзБржорж┐ ржХрж┐ ржЖржорж╛ржХрзЗ ржнрзБрж▓рзЗ ржЧрзЗржЫрзЛ? ЁЯШв`,
    `${nick} ржЖржорж┐ рждрзЛ ржкрзНрж░рждрж┐ржжрж┐ржи рждрзЛржорж╛рж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж┐... ЁЯе║`,
    `${nick} ржХрзЗржирзЛ ржЬрж╛ржирж┐ ржЖржЬ рждрзЛржорж╛ржХрзЗ ржЦрзБржм ржорж┐рж╕ ржХрж░ржЫрж┐...`,
    `${nick} рждрзБржорж┐ ржЖржорж╛рж░ ржЬрж╛ржи, рж╕ржм ржХрж┐ржЫрзБ...`,
    `${nick} ржПржХржЯрзБржЦрж╛ржирж┐ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржжрж╛ржУ ржирж╛ ржкрзНрж▓рж┐ржЬ ЁЯШЪ`
  ];

  if (Math.random() < 0.6) {
    return api.sendMessage(moods[Math.floor(Math.random() * moods.length)], threadID);
  }
};

// Main Command
module.exports.run = async function ({ api, event, args }) {
  const { senderID, messageReply, threadID } = event;
  const data = loadData();
  const targetID = messageReply ? messageReply.senderID : senderID;
  const command = args[0]?.toLowerCase();

  // Admin Only
  if (senderID !== adminUID)
    return api.sendMessage("тЫФя╕П ржПржЗ ржХржорж╛ржирзНржб ржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рж┐ржВржЧрзЗрж▓ ржПржбржорж┐ржи ржорж╛рж░рзБржл рж╕рж╛рж╣рзЗржм ржЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи!", threadID);

  switch (command) {
    case "on":
      global.gfmode[targetID] = true;
      return api.sendMessage(`тЬЕ GF Mode ржЪрж╛рж▓рзБ рж╣рж▓рзЛ UID: ${targetID}`, threadID);

    case "off":
      global.gfmode[targetID] = false;
      return api.sendMessage(`тЭМ GF Mode ржмржирзНржз рж╣рж▓рзЛ UID: ${targetID}`, threadID);

    case "list":
      const list = Object.keys(global.gfmode).filter(uid => global.gfmode[uid]);
      return api.sendMessage(
        list.length ? `ЁЯУЛ GF Mode ON List:\n${list.join("\n")}` : "тЭМ ржХрж╛ржЙржХрзЗ ржПржЦржирзЛ GF Mode-ржП рж░рж╛ржЦрж╛ рж╣рзЯржирж┐ред",
        threadID
      );

    case "gfdiary":
      if (!data[targetID]?.diary || data[targetID].diary.length === 0)
        return api.sendMessage("ЁЯУУ ржПржЗ UID ржПрж░ ржХрзЛржирзЛ ржорзБржб ржбрж╛рзЯрзЗрж░рж┐ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред", threadID);
      const entries = data[targetID].diary.slice(-5).map(d => `ЁЯУЭ ${d.msg} \nтП░ ${d.time}`).join("\n\n");
      return api.sendMessage(`ЁЯУШ рж╢рзЗрж╖ рзлржЯрж┐ ржорзБржб ржбрж╛рзЯрзЗрж░рж┐:\n\n${entries}`, threadID);

    case "setgfdate":
      const field = args[1];
      const value = args[2];
      if (!["birthday", "anniversary"].includes(field) || !value)
        return api.sendMessage("тЪая╕П ржмрзНржпржмрж╣рж╛рж░: .setgfdate birthday/anniversary DD-MM", threadID);
      if (!data[targetID]) data[targetID] = {};
      data[targetID][field] = value;
      saveData(data);
      return api.sendMessage(`тЬЕ ${field} рж╕рзЗржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ: ${value}`, threadID);

    default:
      return api.sendMessage("тЪая╕П .gfmode on/off/list/gfdiary/setgfdate", threadID);
  }
};

// Auto Message System
setInterval(() => {
  const data = loadData();
  for (const uid in global.gfmode) {
    if (!global.gfmode[uid]) continue;
    const nick = nicknames[Math.floor(Math.random() * nicknames.length)];
    const msg = autoMessages[Math.floor(Math.random() * autoMessages.length)];
    const full = `ЁЯМ╝ ${nick}, ${msg}`;
    global.api.sendMessage(full, uid).catch(() => {});
  }
}, 1000 * 60 * 10); // Every 10 mins
